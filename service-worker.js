const CACHE_NAME = 'video-ideas-app-cache-v1';
const urlsToCache = [
  '/',
  '/index.html', // Assuming your main HTML file is index.html
  // Add paths to your main JS bundles if you know them (often generated by build tools)
  // '/static/js/bundle.js', 
  // '/static/js/main.chunk.js',
  // '/static/js/0.chunk.js', 
  // Add paths to CSS files if any
  // '/static/css/main.chunk.css', 
  'https://cdn.jsdelivr.net/npm/party-js@latest/bundle/party.min.js', // Cache party-js
  'icon-192.png', // Add paths to your icons
  'icon-512.png',
  'manifest.json' 
];

// Install event: cache application assets
self.addEventListener('install', event => {
  console.log('Service Worker: Installing...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Service Worker: Caching app shell');
        // Use addAll for atomic caching. If one request fails, the whole operation fails.
        // For robustness, consider caching essential files first, then non-essentials.
        return cache.addAll(urlsToCache).catch(error => {
          console.error('Service Worker: Failed to cache initial assets:', error);
          // Don't fail the install if non-essential assets fail to cache initially
          // You might want a more granular error handling here
        });
      })
      .then(() => {
        console.log('Service Worker: Installation complete, skipping waiting.');
        // Force the waiting service worker to become the active service worker.
        return self.skipWaiting();
      })
  );
});

// Activate event: clean up old caches
self.addEventListener('activate', event => {
  console.log('Service Worker: Activating...');
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('Service Worker: Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
        console.log('Service Worker: Activation complete, claiming clients.');
        // Take control of uncontrolled clients immediately.
        return self.clients.claim();
    })
  );
});

// Fetch event: serve cached content when offline, or fetch from network
self.addEventListener('fetch', event => {
  // console.log('Service Worker: Fetching', event.request.url); // Can be noisy
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Cache hit - return response
        if (response) {
          // console.log('Service Worker: Serving from cache:', event.request.url);
          return response;
        }

        // Not in cache - fetch from network
        // console.log('Service Worker: Fetching from network:', event.request.url);
        return fetch(event.request).then(
          networkResponse => {
            // Check if we received a valid response
            if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {
              return networkResponse;
            }

            // IMPORTANT: Clone the response. A response is a stream
            // and because we want the browser to consume the response
            // as well as the cache consuming the response, we need
            // to clone it so we have two streams.
            const responseToCache = networkResponse.clone();

            caches.open(CACHE_NAME)
              .then(cache => {
                // console.log('Service Worker: Caching new resource:', event.request.url);
                cache.put(event.request, responseToCache);
              });

            return networkResponse;
          }
        ).catch(error => {
          console.error('Service Worker: Fetch failed:', error);
          // Optional: Return a fallback page/resource if fetch fails and not in cache
          // For example, return caches.match('/offline.html'); 
        });
      })
  );
});
